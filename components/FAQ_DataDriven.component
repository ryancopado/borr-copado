<apex:component >
	<apex:attribute name="faqlist" type="FAQ__c[]" description="FAQ List" />
<script type='text/javascript' src='https://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js'></script>
<script>
  
(function($) {
    
    function fixTitle($ele) {
        if ($ele.attr('title') || typeof($ele.attr('original-title')) != 'string') {
            $ele.attr('original-title', $ele.attr('title') || '').removeAttr('title');
        }
    }
    
    function Tipsy(element, options) {
        this.$element = $(element);
        this.options = options;
        this.enabled = true;
        fixTitle(this.$element);
    }
    
    Tipsy.prototype = {
        show: function() {
            var title = this.getTitle();
            if (title && this.enabled) {
                var $tip = this.tip();
                
                $tip.find('.tipsy-inner')[this.options.html ? 'html' : 'text'](title);
                $tip[0].className = 'tipsy'; // reset classname in case of dynamic gravity
                $tip.remove().css({top: 0, left: 0, visibility: 'hidden', display: 'block'}).appendTo(document.body);
                
                var pos = $.extend({}, this.$element.offset(), {
                    width: this.$element[0].offsetWidth,
                    height: this.$element[0].offsetHeight
                });
                
                var actualWidth = $tip[0].offsetWidth, actualHeight = $tip[0].offsetHeight;
                var gravity = (typeof this.options.gravity == 'function')
                                ? this.options.gravity.call(this.$element[0])
                                : this.options.gravity;
                
var tp;
switch (gravity.charAt(0)) {
    case 'n':
      //tp = {top: pos.top + pos.height + this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
        tp = {top: pos.top - this.options.offset - actualHeight , left: pos.left + pos.width + this.options.offset+ this.options.offset};
        break;
    case 's':
      tp = {top: pos.top - actualHeight - this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
      
        break;
    case 'e':
        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth - this.options.offset};
        break;
    case 'w':
        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width + this.options.offset};
        break;
}
                
        if (gravity.length == 2) {
            if (gravity.charAt(1) == 'w') {
                tp.left = pos.left + pos.width / 2 - 15;
            } else {
                tp.left = pos.left + pos.width / 2 - actualWidth + 15;
            }
        }
        
        $tip.css(tp).addClass('tipsy-' + gravity);
        
        if (this.options.fade) {
            $tip.stop().css({opacity: 0, display: 'block', visibility: 'visible'}).animate({opacity: this.options.opacity});
        } else {
            $tip.css({visibility: 'visible', opacity: this.options.opacity});
        }
    }
},
        
        hide: function() {
            if (this.options.fade) {
                this.tip().stop().fadeOut(function() { $(this).remove(); });
            } else {
                this.tip().remove();
            }
        },
        
        getTitle: function() {
            var title, $e = this.$element, o = this.options;
            fixTitle($e);
            var title, o = this.options;
            if (typeof o.title == 'string') {
                title = $e.attr(o.title == 'title' ? 'original-title' : o.title);
            } else if (typeof o.title == 'function') {
                title = o.title.call($e[0]);
            }
            title = ('' + title).replace(/(^\s*|\s*$)/, "");
            return title || o.fallback;
        },
        
        tip: function() {
            if (!this.$tip) {
                this.$tip = $('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"/></div>');
            }
            return this.$tip;
        },
        
        validate: function() {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        
        enable: function() { this.enabled = true; },
        disable: function() { this.enabled = false; },
        toggleEnabled: function() { this.enabled = !this.enabled; }
    };
    
    $.fn.tipsy = function(options) {
        
        if (options === true) {
            return this.data('tipsy');
        } else if (typeof options == 'string') {
            return this.data('tipsy')[options]();
        }
        
        options = $.extend({}, $.fn.tipsy.defaults, options);
        
        function get(ele) {
            var tipsy = $.data(ele, 'tipsy');
            if (!tipsy) {
                tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
                $.data(ele, 'tipsy', tipsy);
            }
            return tipsy;
        }
        
        function enter() {
            var tipsy = get(this);
            tipsy.hoverState = 'in';
            if (options.delayIn == 0) {
                tipsy.show();
            } else {
                setTimeout(function() { if (tipsy.hoverState == 'in') tipsy.show(); }, options.delayIn);
            }
        };
        
        function leave() {
            var tipsy = get(this);
            tipsy.hoverState = 'out';
            if (options.delayOut == 0) {
                tipsy.hide();
            } else {
                setTimeout(function() { if (tipsy.hoverState == 'out') tipsy.hide(); }, options.delayOut);
            }
        };
        
        if (!options.live) this.each(function() { get(this); });
        
        if (options.trigger != 'manual') {
            var binder   = options.live ? 'live' : 'bind',
                eventIn  = options.trigger == 'hover' ? 'mouseenter' : 'focus',
                eventOut = options.trigger == 'hover' ? 'mouseleave' : 'blur';
            this[binder](eventIn, enter)[binder](eventOut, leave);
        }
        
        return this;
        
    };
    
    $.fn.tipsy.defaults = {
        delayIn: 0,
        delayOut: 0,
        fade: true,
        fallback: '',
        gravity: 'n',
        html: true,
        live: false,
        offset: 0,
        opacity: 1,
        title: 'title',
        trigger: 'hover'
    };
    
    // Overwrite this method to provide options on a per-element basis.
    // For example, you could store the gravity in a 'tipsy-gravity' attribute:
    // return $.extend({}, options, {gravity: $(ele).attr('tipsy-gravity') || 'n' });
    // (remember - do not modify 'options' in place!)
    $.fn.tipsy.elementOptions = function(ele, options) {
        return $.metadata ? $.extend({}, options, $(ele).metadata()) : options;
    };
    
    $.fn.tipsy.autoNS = function() {
        return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's' : 'n';
    };
    
    $.fn.tipsy.autoWE = function() {
        return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e' : 'w';
    };
    
})(jQuery);
</script>

<style>

.tipsy { padding: 5px; font-size: 13px; position: absolute; z-index: 100000; }
  .tipsy-inner { padding: 5px 8px 4px 8px; background-color: #0000FF; color: white; max-width: 500px; text-align: left; }
  .tipsy-inner { border-radius: 3px; -moz-border-radius:3px; -webkit-border-radius:3px; }
  .tipsy-arrow { position: absolute; background: url('../images/tipsy.gif') no-repeat top left; width: 9px; height: 5px; }
  .tipsy-n .tipsy-arrow { top: 0; left: 50%; margin-left: -4px; }
    .tipsy-nw .tipsy-arrow { top: 0; left: 10px; }
    .tipsy-ne .tipsy-arrow { top: 0; right: 10px; }
  .tipsy-s .tipsy-arrow { bottom: 0; left: 50%; margin-left: -4px; background-position: bottom left; }
    .tipsy-sw .tipsy-arrow { bottom: 0; left: 10px; background-position: bottom left; }
    .tipsy-se .tipsy-arrow { bottom: 0; right: 10px; background-position: bottom left; }
  .tipsy-e .tipsy-arrow { top: 50%; margin-top: -4px; right: 0; width: 5px; height: 9px; background-position: top right; }
  .tipsy-w .tipsy-arrow { top: 50%; margin-top: -4px; left: 0; width: 5px; height: 9px; }


#gravity { width: 100%;padding:3px; margin: 5px 0; border-spacing: 5px; }
  #gravity td { text-align: center; vertical-align: middle; padding: 5px 0; background-color: #FFFFFF; width: 70%; }
  #gravity a { }
    #gravity a:hover { color: #505075; background: none; }
</style>
<script>
    $(function() {
   $('a[rel=tipsy]').tipsy({fade: true, gravity: 'n'});
 });
</script>
    <style>
.button{
     background-color: #4D90FE;
    background-image: -moz-linear-gradient(center top , #FFFFFF);
    border: 1px solid #FFFFFF;
    color: #FFFFFF !important;
    text-align:center;
    font-size:15px
}
</style>
<style>
body .bPageBlock .pbBody {
padding: 0;
height: 100%;
}
</style>

    <!-- <apex:pageBlock > -->
    
    <apex:outputPanel style=" margin-top:5%; width:60%">
    <apex:pageBlockSection title="General System Safety Warnings" columns="1" collapsible="false">
    <apex:pageBlockSectionItem ><br/>
-   The equipment contains lethal AC and DC voltages! Never disconnect any wires under a load.<br/><br/>
-   Equipment is supplied from multiple sources!<br/><br/>
-   The inverter contains energy storage devices that require 15 minutes to safely discharge lethal voltages!
<br/><br/>
-   Site access is intended for authorized personnel only - No unauthorized persons shall intrude upon the 
solar electric system vicinity.<br/><br/>
-   No unauthorized persons shall shut down the photovoltaic system or open any enclosure.<br/><br/>
-   These servicing instructions are for use by qualified personnel only.<br/><br/>
-   Never work on the solar electric system alone or without authorization.<br/><br/>
*** Unauthorized maintenance on the system and any of its related components<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; will void any product warranties associated with the installation.<br/>

 
                        </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    </apex:outputPanel>
                
		<apex:outputPanel style=" margin-top:5%; width:60%">
			<apex:pageBlockSection title="FAQ" columns="1" collapsible="false" >
            
				<apex:dataTable value="{!faqlist}" var="faq" id="theTable" rowClasses="odd,even" styleClass="tableClass" >
            	
					<apex:column >
            			<br/>
						<a id="north-west" href="#" rel="tipsy" original-title="{!faq.Answer__c}" >{!faq.Question__c}</a>
 
            		</apex:column>
            	
            	</apex:dataTable>
                 
			</apex:pageBlockSection>
			<br/><br/><br/>
               
		</apex:outputPanel>
        
	<!-- </apex:pageBlock> -->
   
</apex:component>