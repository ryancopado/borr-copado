<apex:page id="logACallPage" controller="NVMContactWorld.LogACallActionController" action="{!init}" showHeader="false" applyHtmlTag="false">

    <apex:stylesheet value="{!URLFOR($Resource.NVMContactWorld__Assets, 'assets/Styles-NVM.css')}"/>
    <apex:includeScript value="/canvas/sdk/js/publisher.js" />
    <apex:includeScript value="/support/console/42.0/integration.js"/>

    <apex:form id="logACallForm">
        <apex:actionFunction name="refresh"
            action="{!refreshData}"
            reRender="logACallContainer"
            oncomplete="hideMessageOnClick()">
            <apex:param name="visibleObjectId" assignTo="{!VisibleObjectId}" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="saveDataAndRefresh"
            action="{!saveDataAndRefresh}"
            reRender="logACallContainer"
            oncomplete="refreshFeed();hideMessageOnClick()"/>
        <apex:actionFunction name="refreshStaleData"
            action="{!refreshStaleData}"
            reRender="logACallContainer"
            oncomplete="hideMessageOnClick()">
            <apex:param name="visibleObjectId" assignTo="{!VisibleObjectId}" value=""/>
        </apex:actionFunction>
        <apex:actionFunction name="checkDispositionCodeAvailability"
            action="{!checkDispositionCodeAvailability}"
            onComplete="if({!DispositionCodeAvailable} == false)  {setTimeout(checkDispositionCodeAvailability, 1000)} else {refreshDispositionCode()} "
        />
        <apex:actionFunction name="refreshDispositionCode"
            action="{!refreshDispositionCode}"
            reRender="logACallContainer"
            oncomplete="hideMessageOnClick()" />
        <apex:actionFunction name="setDispositionCode"
            action="{!setDispositionCode}"
            reRender="logACallContainer"
            oncomplete="hideMessageOnClick()" />

        <apex:outputPanel id="logACallContainer" layout="block">
            <div id="NvmPublisherAction">
                <apex:outputPanel layout="none" rendered="{!IsRenderingMessageNoCallWasMade}">
                    {!$Label.nvmcontactworld__nocallyet}
                </apex:outputPanel>
                <apex:outputPanel layout="none" rendered="{!NvmAgentIdUnavailable}">
                    {!$Label.nvmcontactworld__noagentid}
                </apex:outputPanel>
                <apex:outputPanel layout="none" rendered="{!IsRenderingLogACallPanel}">

                    <div id="logACallMessage">
                        <apex:outputPanel rendered="{!ErrorMessage != null}">
                            <div id="logACallError">
                                <strong>{!ErrorMessage}</strong>
                                <a class="boxclose"></a>
                                <br/>
                                <apex:commandButton action="{!SaveToLatestCall}" value="Save Anyway" reRender="logACallContainer" oncomplete="hideMessageOnClick();" rendered="{!ShowErrorMessageButtons}"/>
                                <apex:commandButton action="{!refreshStaleData}" value="Reload" reRender="logACallContainer" oncomplete="hideMessageOnClick();" rendered="{!ShowErrorMessageButtons}"/>
                            </div>
                        </apex:outputPanel>

                        <apex:outputPanel rendered="{!InfoMessage != null}">
                            <div id="logACallInfo" class="{!InfoMessageClass}">
                                <strong>{!InfoMessage}</strong>
                                <a class="boxclose"></a>
                            </div>
                            <script>
                                window.setTimeout(function() {
                                    var logACallInfo = document.querySelector('#logACallInfo');
                                    if(logACallInfo){
                                        logACallInfo.style.display = 'none';
                                    }
                                    removeWithToastFromQuickActionBottomBar();
                                }, 5000);
                            </script>
                        </apex:outputPanel>
                    </div>

                    <apex:outputPanel rendered="{!NotesCollapsed == false}">
                        <apex:outputPanel layout="none" rendered="{!HasCustomFields == false}">
                            <div class="quickActionFieldLabel">
                              <label>{!$Label.nvmcontactworld__noteslabel}</label>
                            </div>

                            <div class="quickActionFieldElement">
                              <apex:inputTextarea id="notesField" html-placeholder="{!$Label.nvmcontactworld__notesplaceholder}" value="{!CallNote}" rows="{!CallNoteRows}" styleClass="notesField" html-autofocus="autofocus"/>
                            </div>
                        </apex:outputPanel>

                        <apex:panelGrid columns="2" styleClass="fieldsGrid" columnClasses="additionalFieldsColumn, notesColumn" rendered="{!HasCustomFields}">
                            <apex:pageblock id="additionalFieldsPageBlock" mode="maindetail">
                                <apex:pageBlockSection showHeader="false" columns="1">
                                    <apex:repeat value="{!CustomFieldNames}" var="customFieldName">
                                        <apex:inputField value="{!CustomFieldsTask[customFieldName]}" styleClass="additionalField"/>
                                    </apex:repeat>
                                </apex:pageBlockSection>
                            </apex:pageblock>

                            <apex:outputPanel layout="none">
                                <div class="quickActionFieldLabel">
                                  <label>{!$Label.nvmcontactworld__noteslabel}</label>
                                </div>
                                <div class="quickActionFieldElement">
                                  <apex:inputTextarea id="notesField2" html-placeholder="{!$Label.nvmcontactworld__notesplaceholder}" value="{!CallNote}" rows="{!CallNoteRows}" styleClass="notesField" html-autofocus="autofocus"/>
                                </div>
                            </apex:outputPanel>
                        </apex:panelGrid>

                        <apex:outputPanel id="whoAndWhat" layout="block" rendered="{!LinkingToMultipleObjectsEnabled}">
                            <div class="quickActionFieldLabel">
                              <label>{!$Label.nvmcontactworld__name}</label>
                            </div>
                            <div class="quickActionFieldLabel">
                              <label>{!$Label.nvmcontactworld__relatedto}</label>
                            </div>

                            <div class="quickActionFieldLabel">
                                <apex:inputField value="{!CustomFieldsTask.WhoId}" styleClass="lookupSection"/>
                            </div>
                            <div class="quickActionFieldLabel">
                                <apex:inputField value="{!CustomFieldsTask.WhatId}" styleClass="lookupSection"/>
                            </div>
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <div class="{!BottomBarClass}">
                        <apex:commandButton action="{!ExpandNotes}" value="Expand" rendered="{!NotesCollapsed}" reRender="logACallContainer" oncomplete="hideMessage();" />
                        <apex:commandButton id="linkCallBtn" value="{!LinkToVisibleObjectLabel}" action="{!linkEventToVisibleObject}" rendered="{!IsRenderingLinkCallButton && !NotesCollapsed}" reRender="logACallContainer" oncomplete="hideMessageOnClick(); showMessage();" styleClass="truncate300" title="{!LinkToVisibleObjectLabel}" />
                        <div class="saveInfo">
                            <apex:outputPanel rendered="{!IsRenderingLastSavedTime}" styleClass="saveInfoLabel">
                                {!$Label.nvmcontactworld__lastsavedtime}: {!LastSavedTime}
                            </apex:outputPanel>
                            <apex:commandButton id="saveNoteBtn" action="{!saveNote}" value="{!$Label.nvmcontactworld__savebutton}" styleClass="mainAction" oncomplete="refreshFeed();hideMessageOnClick();setDispositionCode()" onclick="disableSaveNoteButton();" disabled="{!NotesCollapsed}"/>
                        </div>
                    </div>
                </apex:outputPanel>
            </div>

        </apex:outputPanel>
    </apex:form>

    <script type="text/javascript">
        (function refreshStaleDataOnBrowserTabBecomingVisible() {
            var hidden = "hidden";
            if (hidden in document)
                document.addEventListener("visibilitychange", onchange);
            else if ((hidden = "mozHidden") in document)
                document.addEventListener("mozvisibilitychange", onchange);
            else if ((hidden = "webkitHidden") in document)
                document.addEventListener("webkitvisibilitychange", onchange);
            else if ((hidden = "msHidden") in document)
                document.addEventListener("msvisibilitychange", onchange);

            function onchange () {
                var isVisible = !this[hidden];

                if (isVisible) {
                    console.debug('LogACall refresh triggered due to tab change');
                    refreshStaleData();
                }
            }
        })();
    
    	function onReady(event){
            if (sforce.console.isInConsole()) {
               sforce.console.cti.onCallBegin(function(result) {
                    saveDataAndRefresh();
               });
               sforce.console.onFocusedPrimaryTab(function (result) {
                    refreshStaleData(result.objectId);
               });
               sforce.console.onFocusedSubtab(function (result) {
                    refreshStaleData(result.objectId);
               });
               sforce.console.getFocusedSubtabObjectId(function (subtabResult) {
                    if (subtabResult.success) {
                        refresh(subtabResult.id);
                    }
                    else {
                        sforce.console.getFocusedPrimaryTabObjectId(function (primaryTabResult) {
                            if (primaryTabResult.success) {
                                refresh(primaryTabResult.id);
                            }
                            else {
                                refresh();
                            }
                        });
                    }
               });
               sforce.console.addEventListener('NVM_Log_A_Call', function(result) {
                    if (result.message === 'Refresh_Disposition_Code') {
                        refreshDispositionCode();
                    }
               });
            }
            else {
                refresh();
                hideMessageOnClick();
            }
            Sfdc.canvas.publisher.subscribe([{name : "publisher.customActionMessage", onData : function(e) {
                console.debug('Received custom action message: ' + JSON.stringify(e));
                if (e.message === 'Call_Start_Event') {
                    saveDataAndRefresh();
                } else if (e.message === 'Console_Tab_Change_Event'){
                    refreshStaleData();
                } else if (e.message === 'Refresh_Disposition_Code'){
                    checkDispositionCodeAvailability();
                }
            }}]);
        }

        if (document.readyState === 'loading') {
            document.addEventListener("DOMContentLoaded", onReady);
        } else {  // `DOMContentLoaded` already fired
            onReady();
        }

        function hideMessageOnClick() {
            var logACallInfoBoxClose = document.querySelector('#logACallInfo a.boxclose');
            if(logACallInfoBoxClose){
                function logACallInfoBoxCloseClickHandler () {
                    var logACallInfo = document.querySelector('#logACallInfo');
                    if(logACallInfo){
                    	logACallInfo.style.display = 'none';
                    }
                    removeWithToastFromQuickActionBottomBar();
                    logACallInfoBoxClose.removeEventListener('click', logACallInfoBoxCloseClickHandler);
                }
            	logACallInfoBoxClose.addEventListener('click', logACallInfoBoxCloseClickHandler);
            }
            
            var logACallErrorBoxClose = document.querySelector('#logACallError a.boxclose');
            if(logACallErrorBoxClose){
                function logACallErrorBoxCloseClickHandler () {
                    var logACallError = document.querySelector('#logACallError');
                    if(logACallError){
                    	logACallError.style.display = 'none';
                    }
                    removeWithToastFromQuickActionBottomBar();
                    logACallErrorBoxClose.removeEventListener('click', logACallErrorBoxCloseClickHandler);
                }
            	logACallErrorBoxClose.addEventListener('click', logACallErrorBoxCloseClickHandler);
            }
        }
    
    	function addWithToastToQuickActionBottomBar(){
            var quickActionBottomBar = document.querySelector('.quickActionBottomBar');
            if(quickActionBottomBar){
                quickActionBottomBar.classList.add('withToast');
            }
        }
    
    	function removeWithToastFromQuickActionBottomBar(){
            var quickActionBottomBar = document.querySelector('.quickActionBottomBar');
            if(quickActionBottomBar){
                quickActionBottomBar.classList.remove('withToast');
            }
        }

        function hideMessage() {
            var logACallMessage = document.querySelector('#logACallMessage');
            if(logACallMessage){
                logACallMessage.style.display = 'none';
            }
            removeWithToastFromQuickActionBottomBar();
        }
        function showMessage() {
            var logACallInfo = document.querySelector('#logACallInfo');
            if(logACallInfo){
                logACallInfo.style.display = 'block';
            }
            addWithToastToQuickActionBottomBar();
        }

        function disableSaveNoteButton() {
            var quickActionBottomBarMainAction = document.querySelector('.quickActionBottomBar .mainAction');
            if(quickActionBottomBarMainAction){
                quickActionBottomBarMainAction.disabled = true;
            }
        }

        function refreshFeed() {
            if (document.querySelectorAll('.errorMsg').length == 0) {
                Sfdc.canvas.publisher.publish({name : 'publisher.refresh', payload : { feed: true }});
            }
        }

        function setFocusOnLoad() {
            var textareaElements = document.getElementsByTagName('textarea');
            if(textareaElements && textareaElement.length > 0){
                textareaElements[0].focus();
            }
        };
    </script>

</apex:page>